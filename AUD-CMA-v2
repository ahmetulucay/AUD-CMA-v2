Ahmet Ulucay Drag-and-Carry Multiplication Algorithm v2 (AUD-CMA-v2)
â€“ Convolutional Form â€“

ðŸ”¹ Overview:

AUD-CMA-v2 is a digit-wise, convolution-based integer multiplication algorithm designed to simulate 
and enhance traditional multiplication using array sliding, dot-product logic, and a specialized 
right-to-left drag-and-carry operation. It preserves the leftmost digit's full value during carry propagation, 
providing a deterministic and unique computation path.

---

ðŸ”§ **Algorithm Description

Inputs:

`n` : Integer multiplicand
`m` : Integer multiplier

Step-by-step Algorithm:

1. Convert inputs to digit arrays(python):
N = list(map(int, str(n)))
M = list(map(int, str(m)))

2. Reverse the multiplier for convolution(python):
M = M[::-1]
k = len(M)

3. Pad the multiplicand with `k-1` zeros on both sides(python):
pad = [0] * (k - 1)
N_padded = pad + N + pad

4. Slide a window of size `k` over `N_padded` and compute dot-products(python):
result = []
for i in range(len(N_padded) - k + 1):
    window = N_padded[i:i+k]
    dot = sum(window[j] * M[j] for j in range(k))
    result.append(dot)

5. Apply drag-and-carry operation right-to-left(python):
for i in range(len(result) - 1, 0, -1):
    carry = result[i] // 10
    result[i] = result[i] % 10
    result[i - 1] += carry

Important: The *leftmost digit (`result[0]`)* is preserved in its full form.

6. Concatenate final result(python):
final_number = int(''.join(map(str, result)))

Output:
The integer result of `n Ã— m` computed via AUD&CMA v2.


âœ… *Key Properties*

| Feature                   | Description                                                  |
| ------------------------- | ------------------------------------------------------------ |
| Reversible Kernel         | Multiplier is reversed before convolution                    |
| Fixed Window Size         | Window size `k` equals the number of digits in multiplier    |
| Digit-wise Multiplication | Dot-product of digit slices per window                       |
| Custom Carry Propagation  | Carries processed from right to left; leftmost value is full |
| Suitable for Any Base     | Can be adapted to base-n systems                             |
| Deterministic Output      | No randomness; fully reproducible                            |

---

ðŸ§ª Example: `5425 Ã— 2431`
n: 5425
m: 2431
k: 4

Reversed `m` â†’ `M = [1, 3, 4, 2]`

Padded `n` â†’ `[0, 0, 0, 5, 4, 2, 5, 0, 0, 0]`
Sliding dot-products â†’ `[10, 28, 35, 35, 30, 17, 5]`
After drag-and-carry â†’ `[13, 1, 8, 8, 1, 7, 5]`

Final result â†’ `13,188,175`
